const BkashPayment = require('../models/BkashPayment');
const Booking = require('../models/Booking');

// Mock bKash API integration
const mockBkashAPI = {
  createPayment: async (amount, number) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Generate a mock transaction ID
    const transactionId = 'BK' + Date.now() + Math.random().toString(36).substr(2, 5).toUpperCase();
    
    // Simulate success (90% success rate)
    if (Math.random() < 0.9) {
      return {
        success: true,
        transactionId,
        message: 'Payment initiated successfully'
      };
    } else {
      throw new Error('bKash payment initiation failed');
    }
  },
  
  executePayment: async (transactionId) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Simulate success (95% success rate)
    if (Math.random() < 0.95) {
      return {
        success: true,
        transactionId,
        message: 'Payment completed successfully'
      };
    } else {
      throw new Error('bKash payment execution failed');
    }
  }
};

// @desc    Initialize bKash payment
// @route   POST /api/bkash/initiate
// @access  Private
exports.initiateBkashPayment = async (req, res) => {
  try {
    const { bookingId, bkashNumber } = req.body;

    if (!bookingId || !bkashNumber) {
      return res.status(400).json({
        success: false,
        message: 'Booking ID and bKash number are required'
      });
    }

    // Validate bKash number format (11 digits)
    if (!/^01\d{9}$/.test(bkashNumber)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid bKash number format'
      });
    }

    // Get booking details
    const booking = await Booking.findById(bookingId)
      .populate('property')
      .populate('tenant')
      .populate('owner');

    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Booking not found'
      });
    }

    // Check if booking already has a pending payment
    const existingPayment = await BkashPayment.findOne({
      booking: bookingId,
      status: 'pending'
    });

    if (existingPayment) {
      return res.status(400).json({
        success: false,
        message: 'This booking already has a pending payment'
      });
    }

    // Create payment with bKash API
    const bkashResponse = await mockBkashAPI.createPayment(
      booking.totalAmount,
      bkashNumber
    );

    // Create payment record
    const payment = await BkashPayment.create({
      booking: booking._id,
      property: booking.property._id,
      tenant: booking.tenant._id,
      owner: booking.owner._id,
      amount: booking.totalAmount,
      bkashNumber,
      transactionId: bkashResponse.transactionId,
      status: 'pending'
    });

    // Update booking status
    booking.paymentStatus = 'pending';
    await booking.save();

    res.status(200).json({
      success: true,
      message: 'Payment initiated successfully',
      data: {
        paymentId: payment._id,
        transactionId: payment.transactionId,
        amount: payment.amount,
        status: payment.status
      }
    });

  } catch (error) {
    console.error('bKash payment initiation error:', error);
    
    res.status(500).json({
      success: false,
      message: 'Failed to initiate bKash payment',
      error: error.message
    });
  }
};

// @desc    Execute bKash payment
// @route   POST /api/bkash/execute/:paymentId
// @access  Private
exports.executeBkashPayment = async (req, res) => {
  try {
    const { paymentId } = req.params;

    // Get payment details
    const payment = await BkashPayment.findById(paymentId)
      .populate('booking')
      .populate('property')
      .populate('tenant')
      .populate('owner');

    if (!payment) {
      return res.status(404).json({
        success: false,
        message: 'Payment not found'
      });
    }

    if (payment.status !== 'pending') {
      return res.status(400).json({
        success: false,
        message: `Payment cannot be executed in ${payment.status} status`
      });
    }

    // Execute payment with bKash API
    const bkashResponse = await mockBkashAPI.executePayment(payment.transactionId);

    // Update payment status
    payment.status = 'completed';
    payment.completedAt = Date.now();
    await payment.save();

    // Update booking status
    const booking = await Booking.findById(payment.booking._id);
    booking.paymentStatus = 'completed';
    await booking.save();

    res.status(200).json({
      success: true,
      message: 'Payment completed successfully',
      data: {
        paymentId: payment._id,
        transactionId: payment.transactionId,
        amount: payment.amount,
        status: payment.status,
        completedAt: payment.completedAt
      }
    });

  } catch (error) {
    console.error('bKash payment execution error:', error);
    
    res.status(500).json({
      success: false,
      message: 'Failed to execute bKash payment',
      error: error.message
    });
  }
};
